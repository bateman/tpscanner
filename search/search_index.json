{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<pre><code> _________\n/_  __/ _ \\  __ ______ ____  ___  ___ ____\n / / / ___/\\ \\/ __/ _ `/ _ \\/ _ \\/ -_) __/\n/_/ /_/  /___/\\__/\\_,_/_//_/_//_/\\__/_/\n</code></pre>"},{"location":"#_1","title":"Home","text":"<p>TPscanner is a Python script that extracts prices of items from Trovaprezzi.it, sorts them, displays and saves the results in a spreadsheet. It also finds the best cumulative and individual deals.</p> <p>If your don't want to use the command line, check the TPscanner browser extension. It works on Chromium-based browsers (e.g., Chrome, Edge), Firefox, and Safari.</p> <p></p>"},{"location":"#setup","title":"Setup","text":"<p>Before you can run TPScanner, you need to set up your environment. This project uses Poetry for dependency management. If you haven't installed Poetry yet, you can do so by following the instructions on their official website.</p> <p>Once you have Poetry installed, follow these steps to set up the project:</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/yourusername/tpscanner.git\ncd tpscanner\n</code></pre> <ol> <li> <p>Activate the virtual environment.</p> </li> <li> <p>Install the project dependencies: <pre><code>make install\n</code></pre></p> </li> </ol>"},{"location":"#external-dependencies","title":"External dependencies","text":"<p>The script relies on Selenium web driver. Make sure that the Chrome/Chromium web browser is installed before running the script.</p>"},{"location":"#note","title":"Note","text":"<p>If you don't have <code>poetry</code> installed (or don't want to install it), you can use <code>pip</code> as follows:</p> <ol> <li>First, create a virual environment: <code>python -m venv .tps</code>.</li> <li>Activate it: <code>source .tps/bin/activate</code>.</li> <li>Install requirements: <code>pip install -r requirements.txt</code>.</li> <li>Optional, for development purposes only, run also: <code>pip install -r requirements-dev.txt</code>.</li> </ol>"},{"location":"#usage","title":"Usage","text":"<p>To run the script, use the following command:</p> <p><pre><code>python -m tpscanner -u url1 url2 ... | -f path/to/input/file.txt [-q n1 n2 ...] [--includena] [-w n] [--headless] [--console] [--excel]\n</code></pre> <pre><code>options:\n  -h, --help              Show this help message and exit\n  -u URL [URL ...], --url URL [URL ...]\n                          List of URLs to scan\n  -f FILE, --file FILE    File containing URLs to scan\n  -q QUANTITY [QUANTITY ...], --quantity  QUANTITY [QUANTITY ...]\n                          List of quantities to buy for each URL (in order)\n  -i , --includena        Whether to include items marked as not available\n  -w WAIT, --wait WAIT    Wait time between URLs requests (default 5 sec.)\n  --headless              Run in headless mode\n  -c, --console           Whether to print results to the console\n  -x, --excel             Whether to save results to Excel\n  -l=LEVEL, --level=LEVEL Set the desired logging level\n                          (none, debug, info, warning, error, critical)\n</code></pre></p> <p>Alternatively, you can run the script as:</p> <pre><code>poetry run tpscanner ...\n</code></pre> <p>or</p> <pre><code>make run ARGS=\"...\"\n</code></pre> <p>Warning</p> <p>The script can run with the browser in <code>headless</code> mode. In my tests, however, I've noticed that it often causes the server to display captchas, thus making the script scraping process fail.</p>"},{"location":"#output","title":"Output","text":"<p>When the <code>--console</code> option is enabled, the script outputs to the console the results in the form of tables.</p> <p>When the <code>--excel</code> option is enabled, the script creates a spreadsheet named <code>results_&lt;current_datetime&gt;.xlsx</code> with the sorted list of items and the best cumulative deals.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>You can configure the script by editing the file <code>config/config.json</code>. At the moment, you can configure:</p> <ul> <li><code>sleep_rate_limit = 2</code>: Too aggressive scraping will cause the server to show captchas. By default, the script will wait 2 secs. in between each item's offer scraping.</li> <li><code>chrome_version: 120</code>: The Chrome version to use with the undetected_chromdriver module.</li> <li><code>user_agents = []</code>: A list of browser User-Agent strings to cycle through in headless mode.</li> <li><code>output_dir = results</code>: The output directory where to store the Excel output file. It is set to the <code>results/</code> subfolder in the current working directory by default.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"about/","title":"tpscanner-cli","text":"<p>A Python script that finds the best cumulative and individual deals from Trovaprezzi.it</p>"},{"location":"config/","title":"Config","text":"<p>Class to read the configuration file and set the attributes of the Config class.</p>"},{"location":"config/#tpscanner.config.Config.__getattr__","title":"<code>__getattr__(_)</code>","text":"<p>Return None if the attribute is not found.</p>"},{"location":"config/#tpscanner.config.Config.__init__","title":"<code>__init__(filename)</code>","text":"<p>Initialize the Config class.</p>"},{"location":"io/","title":"IO","text":"<p>Module to save the results to an Excel file.</p>"},{"location":"io/#tpscanner.io.save_results.save_best_cumulative_deals","title":"<code>save_best_cumulative_deals(filename, sheetname, best_deals_items)</code>","text":"<p>Save the best cumulative deals to an Excel file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the Excel file.</p> required <code>sheetname</code> <code>str</code> <p>The name of the sheet.</p> required <code>best_deals_items</code> <code>list</code> <p>The list of best cumulative deals.</p> required"},{"location":"io/#tpscanner.io.save_results.save_best_individual_deals","title":"<code>save_best_individual_deals(filename, sheetname, best_deals_items)</code>","text":"<p>Save the best individual deals to an Excel file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the Excel file.</p> required <code>sheetname</code> <code>str</code> <p>The name of the sheet.</p> required <code>best_deals_items</code> <code>list</code> <p>The list of best individual deals.</p> required"},{"location":"io/#tpscanner.io.save_results.save_individual_deals","title":"<code>save_individual_deals(filename, individual_deals_items)</code>","text":"<p>Save the individual deals to an Excel file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the Excel file.</p> required <code>individual_deals_items</code> <code>dict</code> <p>The dictionary of individual deals.</p> required"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Fabio Calefato</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"logger/","title":"Logger","text":"<p>Logger class for logging messages with rich formatting.</p>"},{"location":"logger/#tpscanner.logger.logger.Format","title":"<code>Format</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enum class for message formatting.</p>"},{"location":"logger/#tpscanner.logger.logger.Logger","title":"<code>Logger</code>","text":"<p>             Bases: <code>object</code></p> <p>Singleton class for logging messages with rich formatting.</p>"},{"location":"logger/#tpscanner.logger.logger.Logger.__new__","title":"<code>__new__()</code>","text":"<p>Create a new instance of the Logger class if it does not exist.</p>"},{"location":"logger/#tpscanner.logger.logger.Logger.critical","title":"<code>critical(message)</code>","text":"<p>Log a critical message.</p> <p>Arguments: message (str): The message to be logged.</p>"},{"location":"logger/#tpscanner.logger.logger.Logger.debug","title":"<code>debug(message)</code>","text":"<p>Log a debug message.</p> <p>Arguments: message (str): The message to be logged.</p>"},{"location":"logger/#tpscanner.logger.logger.Logger.end","title":"<code>end(message)</code>","text":"<p>Log the end of a process.</p> <p>Arguments: message (str): The message to be logged.</p>"},{"location":"logger/#tpscanner.logger.logger.Logger.error","title":"<code>error(message)</code>","text":"<p>Log an error message.</p> <p>Arguments: message (str): The message to be logged.</p>"},{"location":"logger/#tpscanner.logger.logger.Logger.info","title":"<code>info(message)</code>","text":"<p>Log an info message.</p> <p>Arguments: message (str): The message to be logged.</p>"},{"location":"logger/#tpscanner.logger.logger.Logger.set_log_level","title":"<code>set_log_level(level)</code>  <code>staticmethod</code>","text":"<p>Set the logging level for the logger.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>The logging level.</p> required"},{"location":"logger/#tpscanner.logger.logger.Logger.start","title":"<code>start(message)</code>","text":"<p>Log the start of a process.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to be logged.</p> required"},{"location":"logger/#tpscanner.logger.logger.Logger.warn","title":"<code>warn(message)</code>","text":"<p>Log a warning message.</p> <p>Arguments: message (str): The message to be logged.</p>"},{"location":"scanner/","title":"Scanner","text":"<p>Scanner class that is responsible for scanning the URLs and extracting the prices and shipping costs.</p> <p>Attributes:</p> Name Type Description <code>level</code> <code>str</code> <p>The level of the scanner.</p> <code>urls</code> <code>list</code> <p>The list of URLs to scan.</p> <code>quantities</code> <code>list</code> <p>The list of quantities for each URL.</p> <code>wait</code> <code>int</code> <p>The number of seconds to wait before scraping the next URL.</p> <code>headless</code> <code>bool</code> <p>The headless mode of the browser.</p> <code>console_out</code> <code>bool</code> <p>The console output flag.</p> <code>excel_out</code> <code>bool</code> <p>The Excel output flag.</p> <code>individual_deals</code> <code>dict</code> <p>The dictionary of individual deals.</p> <code>best_individual_deals</code> <code>list</code> <p>The list of best individual deals.</p> <code>best_cumulative_deals</code> <code>dict</code> <p>The dictionary of best cumulative deals.</p> <code>formatted_datetime</code> <code>str</code> <p>The formatted datetime string.</p> <p>Methods:</p> Name Description <code>scan</code> <p>Scans the URLs and extracts the prices and shipping costs.</p> <code>remove_unavailable_items</code> <p>Removes the unavailable items from the individual deals.</p> <code>find_best_individual_deals</code> <p>Finds the best individual deals.</p> <code>find_best_cumulative_deals</code> <p>Finds the best cumulative deals.</p>"},{"location":"scanner/#tpscanner.core.scanner.Scanner.__init__","title":"<code>__init__(level, urls, quantities, wait, headless, console_out, excel_out)</code>","text":"<p>Initialize the Scanner object with the specified parameters.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>The level of the scanner.</p> required <code>urls</code> <code>list</code> <p>The list of URLs to scan.</p> required <code>quantities</code> <code>list</code> <p>The list of quantities for each URL.</p> required <code>wait</code> <code>int</code> <p>The number of seconds to wait before scraping the next URL.</p> required <code>headless</code> <code>bool</code> <p>The headless mode of the browser.</p> required <code>console_out</code> <code>bool</code> <p>The console output flag.</p> required <code>excel_out</code> <code>bool</code> <p>The Excel output flag.</p> required"},{"location":"scanner/#tpscanner.core.scanner.Scanner.find_best_cumulative_deals","title":"<code>find_best_cumulative_deals()</code>","text":"<p>Find the best cumulative deals.</p> <p>This method iterates over the items in the <code>individual_deals</code> dictionary and checks if the seller indicates a free delivery threshold and if the cumulative price is greater than or equal to the threshold. If both conditions are met, the item is considered as one of the best individual deals and is added to the <code>best_individual_deals</code> list.</p>"},{"location":"scanner/#tpscanner.core.scanner.Scanner.find_best_individual_deals","title":"<code>find_best_individual_deals()</code>","text":"<p>Find the best individual deals.</p> <p>This method iterates over the items in the <code>individual_deals</code> dictionary and checks if the seller indicates a free delivery threshold and if the cumulative price is greater than or equal to the threshold. If both conditions are met, the item is considered as one of the best individual deals and is added to the <code>best_individual_deals</code> list.</p>"},{"location":"scanner/#tpscanner.core.scanner.Scanner.remove_unavailable_items","title":"<code>remove_unavailable_items()</code>","text":"<p>Remove the unavailable items from the individual deals.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The count of removed items.</p>"},{"location":"scanner/#tpscanner.core.scanner.Scanner.scan","title":"<code>scan()</code>","text":"<p>Scan the URLs and extracts the prices and shipping costs.</p> <p>This method iterates over the list of URLs and performs the following steps for each URL: 1. Creates an instance of the Scraper class with the specified wait time and headless mode. 2. Downloads the HTML content for the URL, including prices plus shipping costs and best prices with shipping costs included. 3. Extracts the item name and a list of items with their respective prices and shipping costs. 4. Extracts the best price with shipping costs included. 5. If the best price is not already in the list of items, it is added. 6. Sorts the list of items by price. 7. Stores the list of items in the individual_deals dictionary with the item name as the key. 8. Logs the number of deals found for the item. 9. Waits for a specified amount of time before processing the next URL.</p> <p>Note: This method uses the Progress class from the rich.progress module to display a progress bar during the scanning process.</p>"},{"location":"scraper/","title":"Scraper","text":"<p>Scraper class for scraping the Trovaprezzi website.</p>"},{"location":"scraper/#tpscanner.scraper.Scraper.__init__","title":"<code>__init__(wait, headless)</code>","text":"<p>Initialize the Scraper object with the specified wait time and headless mode.</p> <p>Parameters:</p> Name Type Description Default <code>wait</code> <code>int</code> <p>The wait time for the WebDriver to wait for an element to be clickable.</p> required <code>headless</code> <code>bool</code> <p>A boolean value indicating whether to run the WebDriver in headless mode.</p> required"},{"location":"scraper/#tpscanner.scraper.Scraper.download_html","title":"<code>download_html(url)</code>","text":"<p>Download the HTML content of the specified URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to download the HTML content from.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>A tuple containing the HTML content of the page.</p>"},{"location":"scraper/#tpscanner.scraper.Scraper.extract_best_price_shipping_included","title":"<code>extract_best_price_shipping_included(html_content, quantity)</code>","text":"<p>Extract the best price of the item shipping included from the HTML content.</p> <p>Parameters:</p> Name Type Description Default <code>html_content</code> <code>str</code> <p>The HTML content to extract the prices from.</p> required <code>quantity</code> <code>int</code> <p>The quantity of items to buy.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>A tuple containing the item name and the best price item.</p>"},{"location":"scraper/#tpscanner.scraper.Scraper.extract_prices_plus_shipping","title":"<code>extract_prices_plus_shipping(html_content, quantity)</code>","text":"<p>Extract the prices of the items plus shipping cost from the HTML content.</p> <p>Parameters:</p> Name Type Description Default <code>html_content</code> <code>str</code> <p>The HTML content to extract the prices from.</p> required <code>quantity</code> <code>int</code> <p>The quantity of items to buy.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>A tuple containing the item name and a list of items.</p>"},{"location":"ui/","title":"UI","text":"<p>Console class for displaying formatted output using the Rich library.</p> <p>Attributes:</p> Name Type Description <code>console</code> <code>Console</code> <p>The RichConsole object used for printing formatted output.</p> <code>columns_individual</code> <code>list</code> <p>List of tuples representing the columns for individual deals table.</p> <code>columns_cumulative</code> <code>list</code> <p>List of tuples representing the columns for cumulative deals table.</p> <p>Methods:</p> Name Description <code>__init__</code> <p>Initializes the Console object with a RichConsole instance and sets the column configurations.</p> <code>print</code> <p>Prints a message with the specified level of styling.</p> <code>_create_table</code> <p>Creates a Rich Table object with the specified title and column configurations.</p> <code>display_best_individual_deals</code> <p>Displays the best individual deals in a formatted table.</p> <code>display_best_cumulative_deals</code> <p>Displays the best cumulative deals in a formatted table.</p>"},{"location":"ui/#tpscanner.ui.console.Console.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the Console object with a RichConsole instance and sets the column configurations.</p>"},{"location":"ui/#tpscanner.ui.console.Console.display_best_cumulative_deals","title":"<code>display_best_cumulative_deals(best_cumulative_deals, title)</code>","text":"<p>Display the best cumulative deals.</p> <p>This function takes a list of cumulative deals, sorts them in descending order of value, and prints the top deals to the console.</p> <p>Parameters:</p> Name Type Description Default <code>best_cumulative_deals</code> <code>Iterable[Dict]</code> <p>A list of cumulative deal objects. Each cumulative deal object should have a 'value' attribute.</p> required <code>title</code> <code>str</code> <p>The title of the table.</p> required"},{"location":"ui/#tpscanner.ui.console.Console.display_best_individual_deals","title":"<code>display_best_individual_deals(best_individual_deals, title)</code>","text":"<p>Display the best individual deals.</p> <p>This function takes a list of deals, sorts them in descending order of value, and prints the top deals to the console.</p> <p>Parameters:</p> Name Type Description Default <code>best_individual_deals</code> <code>Iterable[Dict]</code> <p>A list of deal objects. Each Deal object should have a 'value' attribute.</p> required <code>title</code> <code>str</code> <p>The title of the table.</p> required"},{"location":"ui/#tpscanner.ui.console.Console.print","title":"<code>print(message, level='info')</code>","text":"<p>Print a message with the specified level of styling.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to be printed.</p> required <code>level</code> <code>str</code> <p>The level of styling to be applied to the message.</p> <code>'info'</code>"},{"location":"utils/","title":"Utils","text":"<p>Utility functions for the TPScanner.</p>"},{"location":"utils/#tpscanner.utils.utils.sleep","title":"<code>sleep(interval)</code>","text":"<p>Sleep for the specified interval plus a random amount of time between 0 and 1 second.</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>int</code> <p>The interval to sleep for.</p> required"}]}